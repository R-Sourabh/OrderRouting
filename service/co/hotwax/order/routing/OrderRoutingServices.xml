<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">

    <service verb="clean" noun="OrderRoutingRun" authenticate="false" transaction-timeout="600">
        <description>Deletes OrderRoutingRun records older than a specified number of days.</description>
        <in-parameters><parameter name="daysToKeep" type="Integer" default="60"/></in-parameters>
        <out-parameters><parameter name="recordsRemoved" type="Long"/></out-parameters>
        <actions>
            <script>
                import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityCondition
                ExecutionContext ec = context.ec
                Calendar basisCal = ec.user.getCalendarSafe()
                basisCal.add(Calendar.DAY_OF_YEAR, (int) - daysToKeep)
                basisTimestamp = new Timestamp(basisCal.getTimeInMillis())
                recordsRemoved = ec.entity.find("moqui.service.job.ServiceJobRun")
                .condition("startTime", EntityCondition.LESS_THAN, basisTimestamp)
                .disableAuthz().deleteAll()
            </script>
            <log message="Removed ${recordsRemoved} OrderRoutingRun records."/>
        </actions>
    </service>

    <service verb="run" noun="OrderRoutingGroup" transaction-timeout="36000" authenticate="anonymous-all"
             semaphore="wait" semaphore-parameter="productStoreId" semaphore-timeout="3600" semaphore-sleep="120" semaphore-name="OrderRoutingGroup">
        <in-parameters>
            <parameter name="routingGroupId" required="true"/>
            <parameter name="productStoreId" required="true"/>
            <parameter name="orderId"/>
            <parameter name="shipGroupSeqId"/>
            <parameter name="forceRun" type="Boolean" default-value="false"/>
            <!--
            In order to leverage the Service semaphore capabilities provided by the framework, we have chosen to include productStoreId as an input parameter.
            While productStoreId already exists in the OrderRoutingGroup entity,
            opting to use it as an input parameter allows us to seamlessly utilize the framework's existing functionality.

            By incorporating productStoreId as an input parameter,
            we can take advantage of the framework's built-in features without the need for additional custom handling.
            This approach aligns with the established design principles within the framework and ensures a more streamlined and maintainable solution.
            -->
        </in-parameters>
        <actions>
            <!--
                validate the routing group and product store association
            -->
            <entity-find-one entity-name="co.hotwax.order.routing.OrderRoutingGroup" value-field="orderRoutingGroup"/>
            <if condition="!orderRoutingGroup">
                <return error="true" message="Order routing not found for ${routingGroupId}"/>
            </if>
            <if condition="!orderRoutingGroup.productStoreId">
                <return error="true" message="No productStore associated with routing group ${orderRoutingGroup.groupName} [${routingGroupId}]"/>
            </if>
            <if condition="orderRoutingGroup.productStoreId != productStoreId">
                <return error="true" message="Order routing group ${orderRoutingGroup.groupName} [${routingGroupId}] is not associated with productStoreId [${productStoreId}]."/>
            </if>
            <!--TODO: Need to check if we really want to add below check, as we are using service semaphore to avoid simultaneous run -->
            <entity-find entity-name="co.hotwax.order.routing.OrderRoutingRun" list="routingRuns">
                <econditions>
                    <econdition field-name="productStoreId" from="orderRoutingGroup.productStoreId"/>
                    <econdition field-name="endDate" from="null"/>
                </econditions>
                <order-by field-name="-startDate"/>
            </entity-find>
            <set field="routingRun" from="routingRuns?routingRuns[0]: null"/>
            <!-- If an routing run is in execution, don't run the rule -->
            <if condition="routingRun">
                <if condition="forceRun">
                    <service-call name="update#co.hotwax.order.routing.OrderRoutingRun" transaction="force-new" ignore-error="true"
                            in-map="[routingRunId:routingRun.routingRunId,hasError:'Y',
                                    routingResult:'Start a new force order routing run, bringing the current routing run to an end',
                                    endDate:ec.user.nowTimestamp]" out-map="routingRunResult"/>
                    <else>
                        <return error="true" message="Routing run [${routingRun.routingRunId}] for productStoreId [${orderRoutingGroup.productStoreId}]
                                already in execution since ${routingRun.startDate}"/>
                    </else>
                </if>

            </if>
            <!-- Get the all active routing for order routing group -->
            <entity-find entity-name="co.hotwax.order.routing.OrderRouting" list="orderRoutings">
                <econditions>
                    <econdition field-name="routingGroupId" from="routingGroupId"/>
                    <econdition field-name="statusId" value="ROUTING_ACTIVE"/>
                </econditions>
                <order-by field-name="sequenceNum asc"/>
            </entity-find>
            <if condition="!orderRoutings">
                <return type="warning" message="No order routing configuration found for the specified routing group [${routingGroupId}]."/>
            </if>
            <log message="Started order routing for ${orderRoutingGroup.groupName} [${routingGroupId}] routing group."/>
            <iterate list="orderRoutings" entry="orderRouting">
                <service-call name="create#co.hotwax.order.routing.OrderRoutingRun" transaction="force-new" ignore-error="true"
                        in-map="[routingGroupId:routingGroupId, orderRoutingId: orderRouting.orderRoutingId,
                                productStoreId: productStoreId, startDate:ec.user.nowTimestamp]"
                        out-map="routingRunResult"/>
                <set field="runNextRouting" value="true" default-value="true" type="Boolean"/>
                <script>
                    /*
                        Calling a service in a script with ignore-error="true".
                        In this scenario, there is no direct way to identify if the service returned an error.
                        As we want to log the hasError status at the OrderRoutingRun level, to address this we are calling service in script tag
                    */
                    try {
                        def orderRoutingResult = ec.service.sync().name("co.hotwax.order.routing.OrderRoutingServices.run#OrderRouting")
                                .requireNewTransaction(true)
                                .parameters([orderRoutingId: orderRouting.orderRoutingId, orderId: orderId, shipGroupSeqId: shipGroupSeqId])
                                .call()

                        runNextRouting = orderRoutingResult.runNextRouting
                    } catch (Throwable e) {
                        ec.logger.error("There is an issue with run#OrderRouting", e)
                    }
                    def routingResult = null
                    def hasError = "N"
                    if (ec.message.hasError()) {
                        hasError = "Y"
                        routingResult = ec.message.getErrorsString()
                    } else {
                        routingResult = ec.message.getMessagesString()
                    }
                    if (routingResult &amp;&amp; routingResult.length() &gt; 255) {
                        routingResult = routingResult.substring(0, 255)
                    }
                    ec.message.clearAll();
                </script>
                <service-call name="update#co.hotwax.order.routing.OrderRoutingRun" transaction="force-new" ignore-error="true"
                        in-map="[routingRunId:routingRunResult.routingRunId,hasError:hasError, routingResult:routingResult, endDate:ec.user.nowTimestamp]"
                        out-map="routingRunResult"/>
                <if condition="!runNextRouting">
                    <break/>
                </if>
            </iterate>
            <message type="success">Finished order routing for ${orderRoutingGroup.groupName} [${routingGroupId}] routing group.</message>
        </actions>
    </service>

    <service verb="run" noun="OrderRouting" transaction-timeout="36000">
        <in-parameters>
            <parameter name="orderRoutingId" required="true"/>
            <parameter name="orderId"/>
            <parameter name="shipGroupSeqId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="runNextRouting" type="Boolean"/>
        </out-parameters>
        <actions>
            <!-- If an order is routed to a facility, all subsequent order routing run executions should be excluded-->
            <set field="runNextRouting" value="true" type="Boolean"/>
            <entity-find-one entity-name="co.hotwax.order.routing.OrderRouting" value-field="orderRouting" cache="true"/>
            <if condition="!orderRouting">
                <return error="true" message="No order routing found for id ${orderRoutingId}"/>
            </if>
            <if condition="!'ROUTING_ACTIVE'.equals(orderRouting.statusId)">
                <return error="true" message="Order routing ${orderRouting.routingName} [${orderRoutingId}] is not active"/>
            </if>
            <log message="Started order routing ${orderRouting.routingName} [${orderRoutingId}]"/>
            <entity-find entity-name="co.hotwax.order.routing.OrderFilterCondition" list="orderFilterConditions">
                <econdition field-name="orderRoutingId" from="orderRoutingId"/>
                <order-by field-name="sequenceNum asc"/>
            </entity-find>
            <!-- Prepare the filter conditions for the order routing -->
            <filter-map-list list="orderFilterConditions" to-list="filterConditions">
                <field-map field-name="conditionTypeEnumId" value="ENTCT_FILTER"/>
            </filter-map-list>
            <!-- Prepare the order by for the order routing -->
            <filter-map-list list="orderFilterConditions" to-list="sortFields">
                <field-map field-name="conditionTypeEnumId" value="ENTCT_SORT_BY"/>
            </filter-map-list>
            <entity-find entity-name="co.hotwax.order.routing.OrderRoutingRule" list="orderRoutingRules">
                <econditions>
                    <econdition field-name="orderRoutingId" from="orderRoutingId"/>
                    <econdition field-name="statusId" value="RULE_ACTIVE"/>
                </econditions>
                <order-by field-name="sequenceNum asc"/>
            </entity-find>

            <if condition="!orderRoutingRules">
                <return error="true" message="No routing rule setup for order routing ${orderRouting.routingName} [${orderRoutingId}]"/>
            </if>
            <script>
                import org.moqui.entity.EntityListIterator
                import org.moqui.entity.EntityFind;
                import org.moqui.impl.entity.EntityConditionFactoryImpl
                import java.time.format.DateTimeFormatter;

                EntityFind orderFind = ec.entity.find("co.hotwax.order.OrderItemsQueue")
                // Prepare the default base condition to get the eligible orderItemShipGroup
                orderFind.condition("itemStatusId", "ITEM_APPROVED")
                orderFind.condition("parentTypeId", "VIRTUAL_FACILITY")
                orderFind.condition("orderItemCount", org.moqui.entity.EntityCondition.GREATER_THAN, "0")

                if (orderId) {
                    orderFind.condition("orderId", orderId)
                    if (shipGroupSeqId) orderFind.condition("shipGroupSeqId", shipGroupSeqId)
                }
                selectFields = ["orderId", "shipGroupSeqId"];
                filterConditions.each{filterCondition ->
                    if ("promiseDaysCutoff".equals(filterCondition.fieldName)) {
                        if (filterCondition.fieldValue) {
                            //if promiseDaysCutoff is set, use it brokering will run for each order item instead at shipGroup level
                            //it means partial allocation won't work as expected
                            selectFields.add("orderItemSeqId")
                            promisedDatetime = ZonedDateTime.now().plusDays(filterCondition.fieldValue as Long).with(java.time.LocalTime.MAX).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS"))
                            orderFind.condition('promisedDatetime', EntityConditionFactoryImpl.stringComparisonOperatorMap.get(filterCondition.operator), promisedDatetime)
                        }
                    } else {
                        orderFind.condition(filterCondition.fieldName, EntityConditionFactoryImpl.stringComparisonOperatorMap.get(filterCondition.operator), filterCondition.fieldValue)
                    }
                }

                sortFields.each { sortField ->
                    orderFind.orderBy(sortField.fieldName)
                }
                orderFind.selectFields(selectFields)
                attemptedCount = orderFind.count()
                ec.logger.info("Fetching order with condition ${orderFind} for routing ${orderRouting.routingName} [${orderRoutingId}]")
                try (EntityListIterator eli = orderFind.iterator()) {
                    while ((shipGroup = eli.next()) != null) {
                        try {
                            ruleIterator = orderRoutingRules.iterator()
                            while (ruleIterator.hasNext()) {
                                routingRule = ruleIterator.next()
                                ruleResult = ec.service.sync().name("co.hotwax.order.routing.OrderRoutingServices.run#OrderRoutingRule")
                                        .requireNewTransaction(true)
                                        .parameters([orderRoutingId: orderRouting.orderRoutingId, routingRuleId: routingRule.routingRuleId,
                                                orderId: shipGroup.orderId, shipGroupSeqId: shipGroup.shipGroupSeqId, orderItemSeqId: shipGroup.orderItemSeqId])
                                        .call()
                                if (!ec.message.hasError()) {
                                    actionResult = ec.service.sync().name("co.hotwax.order.routing.OrderRoutingServices.eval#OrderRoutingActions")
                                            .requireNewTransaction(true)
                                            .parameters([orderId: shipGroup.orderId, shipGroupSeqId: shipGroup.shipGroupSeqId,orderItemSeqId: shipGroup.orderItemSeqId,
                                                    routingRuleId: routingRule.routingRuleId, suggestedFulfillmentLocations: ruleResult.suggestedFulfillmentLocations])
                                            .call()
                                    if (ec.message.hasError()) {
                                        ec.logger.warn("Ignoring order routing actions errors for ${routingRule.ruleName} [${routingRule.routingRuleId}] " + ec.message.getErrorsString())
                                        ec.message.clearAll()
                                    }
                                    if (!actionResult.runNextRule) {
                                        //Break the outer loop as well if its only for single orderId
                                        runNextRouting = false
                                        break
                                    }
                                } else {
                                    ec.logger.warn("Ignoring order routing rule errors " + ec.message.getErrorsString())
                                    ec.message.clearAll()
                                }
                            }
                        } catch (Throwable e) {
                            ec.logger.error("There is an issue with run#OrderRoutingRule", e)
                        }
                    }
                } catch (Exception e) {
                    ec.logger.error(e.getMessage())
                }
            </script>
            <return message="Attempted to process ${attemptedCount} ${selectFields.contains('orderItemSeqId')?'item(s)':'ship group(s)'} for the '${orderRouting.routingName} [${orderRoutingId}]' order routing"/>
        </actions>
    </service>

    <service verb="run" noun="OrderRoutingRule" transaction-timeout="36000">
        <in-parameters>
            <parameter name="orderRoutingId"/>
            <parameter name="routingRuleId"/>
            <parameter name="orderId"/>
            <parameter name="shipGroupSeqId"/>
            <parameter name="orderItemSeqId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="suggestedFulfillmentLocations"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="co.hotwax.order.routing.OrderRoutingRule" value-field="orderRoutingRule" cache="true"/>
            <if condition="!orderRoutingRule">
                <return error="true" message="No order routing found for id ${routingRuleId}"/>
            </if>
            <if condition="!'RULE_ACTIVE'.equals(orderRoutingRule.statusId)">
                <return error="true" message="Order routing ${orderRoutingRule.ruleName} [${orderRoutingId}] is not active"/>
            </if>
            <log level="info" message="Executing order routing rule ${orderRoutingRule.ruleName} [${routingRuleId}] for orderId ${orderId} and shipGroupSeqId ${shipGroupSeqId}"/>

            <entity-find entity-name="co.hotwax.order.routing.OrderRoutingRuleInvCond" list="inventoryConditions">
                <econdition field-name="routingRuleId" from="routingRuleId"/>
                <order-by field-name="sequenceNum asc"/>
            </entity-find>
            <set field="inventoryFilterMap" from="[:]" />
            <filter-map-list list="inventoryConditions" to-list="filterConditions">
                <field-map field-name="conditionTypeEnumId" value="ENTCT_FILTER"/>
            </filter-map-list>
            <iterate list="filterConditions" entry="filterCondition">
                <script>
                    inventoryFilterMap.put(filterCondition.fieldName, filterCondition)
                </script>
            </iterate>
            <set field="conversionFactor" value="0.000621371"/>
            <set field="measurementSystem" from="inventoryFilterMap?.measurementSystem?.fieldValue" default-value="IMPERIAL"/>
            <if condition="measurementSystem.equals('METRIC')">
                <set field="conversionFactor" value="0.0001"/>
            </if>
            <filter-map-list list="inventoryConditions" to-list="sortFields">
                <field-map field-name="conditionTypeEnumId" value="ENTCT_SORT_BY"/>
            </filter-map-list>
            <order-map-list list="sortFields">
                <order-by field-name="sequenceNum asc"/>
            </order-map-list>
            <set field="inventorySortByList" from="sortFields != null ? sortFields.fieldName:[]" type="List"/>
            <set field="templateLoc" value="component://order-routing/sql/InventorySourceSelector.sql.ftl"/>
            <set field="suggestedFulfillmentLocations" from="[]"/>
            <script>
                try {
                Writer writer = new StringWriter()
                ec.resourceFacade.template(templateLoc, writer)
                //ec.logger.info("======writer==${writer}==")
                java.sql.Connection con = ec.getEntity().getConnection(orderRoutingRule.getEntityDefinition().getEntityGroupName())
                con.createStatement().withCloseable({ statement ->
                    statement.executeQuery(writer.toString()).withCloseable({resultSet ->
                        while (resultSet.next()) {
                            suggestedFulfillmentLocations.add([
                                orderId: resultSet.getString('ORDER_ID'),
                                orderItemSeqId: resultSet.getString('ORDER_ITEM_SEQ_ID'),
                                //productId: resultSet.getString('PRODUCT_ID'),
                                shipGroupTotalQty: resultSet.getInt('ship_group_total_qty'),
                                itemQty: resultSet.getInt('ITEM_QTY'),
                                routedItemQty: resultSet.getInt('ROUTED_ITEM_QTY'),
                                facilityTypeId: resultSet.getString('FACILITY_TYPE_ID'),
                                facilityId: resultSet.getString('FACILITY_ID'),
                                distance: resultSet.getString('distance')
                            ])
                        }
                    })
                })
                } catch (Exception e) {
                    ec.logger.error("Error executing order routing rule ${orderRoutingRule.ruleName} [${routingRuleId}] : ${e.getMessage()}")
                }
            </script>
        </actions>
    </service>

    <service verb="eval" noun="OrderRoutingActions" transaction-timeout="3600">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="shipGroupSeqId" required="true"/>
            <parameter name="orderItemSeqId"/>
            <parameter name="routingRuleId" required="true"/>
            <parameter name="suggestedFulfillmentLocations" type="List"/>
        </in-parameters>
        <out-parameters>
            <parameter name="runNextRule" type="Boolean"/>
            <parameter name="facilityAllocation" type="List"/>
        </out-parameters>
        <actions>
            <set field="runNextRule" value="true" type="Boolean"/>
            <entity-find-one entity-name="co.hotwax.order.routing.OrderRoutingRule" value-field="routingRule" cache="true"/>
            <entity-find-related-one value-field="routingRule" relationship-name="co.hotwax.order.routing.OrderRouting" to-value-field="orderRouting" cache="true"/>
            <entity-find-related-one value-field="orderRouting" relationship-name="co.hotwax.order.routing.OrderRoutingGroup" to-value-field="orderRoutingGroup" cache="true"/>
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" value-field="orderItemShipGroup"/>
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderItem" list="orderItems">
                <econditions>
                    <econdition field-name="orderId" from="orderId"/>
                    <econdition field-name="shipGroupSeqId" from="shipGroupSeqId"/>
                    <econdition field-name="orderItemSeqId" from="orderItemSeqId" ignore-if-empty="true"/>
                    <econdition field-name="statusId" value="ITEM_APPROVED"/>
                </econditions>
            </entity-find>
            <entity-find entity-name="co.hotwax.order.routing.OrderRoutingRuleAction" list="ruleActions" cache="true">
                <econditions>
                    <econdition field-name="routingRuleId" from="routingRuleId"/>
                    <econdition field-name="actionValue"  operator="is-not-null"/>
                </econditions>
            </entity-find>
                <script>
                    import java.time.format.DateTimeFormatter;
                    import java.time.ZonedDateTime
                    import java.util.stream.Collectors;
                    import org.moqui.entity.EntityCondition
                    //if single assignment preferred, then sql will return result only if all the shipgroup items available at single location
                    def actionMap = ruleActions.collectEntries { [it.actionTypeEnumId, it.actionValue] }

                    facilityAllocation = [];
                    def comments= null
                    def routingRuleName = "${orderRoutingGroup.groupName} [${orderRoutingGroup.routingGroupId}] : ${orderRouting.routingName} [${orderRouting.orderRoutingId}] : ${routingRule.ruleName} [${routingRule.routingRuleId}]"
                    def suggestedFacilityIds = suggestedFulfillmentLocations.facilityId as Set
                    if (!routingRule.assignmentEnumId || 'ORA_SINGLE'.equals(routingRule.assignmentEnumId)) {
                        //SQL will not reutrn result if items not available at single location
                        //Additional check to make sure all items are available at single location,
                        if (!(suggestedFacilityIds.size() == 1)) {
                            comments = "${orderRoutingGroup.groupName} [${orderRoutingGroup.routingGroupId}] : Inventory not found at single location for ${routingRule.ruleName} [${routingRule.routingRuleId}]."
                            ec.logger.log(ec.logger.DEBUG_INT, "Inventory not found at single location for ${routingRule.ruleName} [${routingRule.routingRuleId}] for orderId ${orderId} and shipGroupSeqId ${shipGroupSeqId}", null);
                            suggestedFulfillmentLocations = []
                        }
                    }
                    //prepare map for brokered items
                    def queue = null, autoCancelDate = null, brokeredItemsSeqIds = [] ;
                    if (suggestedFulfillmentLocations) {
                        brokeredItemsSeqIds = suggestedFulfillmentLocations.orderItemSeqId;
                        suggestedFacilityIds.each { facilityId->
                            def facilityItems = suggestedFulfillmentLocations.collect()
                            comments = "${orderRoutingGroup.groupName} [${orderRoutingGroup.routingGroupId}] : Inventory found at single location for ${routingRule.ruleName} [${routingRule.routingRuleId}]"
                            filterMapList(facilityItems, ["facilityId":facilityId], false)
                            def items = facilityItems.collect { [orderItemSeqId: it.orderItemSeqId] }
                            facilityAllocation.add([facilityId:facilityId, items: items, comments: comments, routingRule: routingRuleName])
                        }
                    }
                    def unfillableItemSeqIds = orderItems.orderItemSeqId.stream().filter(i -> !brokeredItemsSeqIds.contains(i)).collect(Collectors.toList())
                    if (unfillableItemSeqIds) {
                        if (suggestedFulfillmentLocations) {
                            comments = "${orderRoutingGroup.groupName} [${orderRoutingGroup.routingGroupId}] : Inventory not found for ${routingRule.ruleName} [${routingRule.routingRuleId}]."
                        }
                        //If unfillable items found, check for actions
                        if (actionMap.get('ORA_MV_TO_QUEUE') != null) {
                            queue = actionMap.get('ORA_MV_TO_QUEUE');
                            comments += "Unfillalbe items moved to ${queue}."
                            //If action is to move to queue, then no need to run next rule. As all unfillable items will be moved to queue
                            runNextRule = false
                        }
                        def clearAutoCancelDate = basicConvert(actionMap.get('ORA_RM_CANCEL_DATE'), 'Boolean') ?: false
                        if (clearAutoCancelDate || actionMap.get('ORA_AUTO_CANCEL_DAYS') != null) {
                            if (!queue) {
                                queue = orderItemShipGroup.facilityId
                            }
                            if (!clearAutoCancelDate &amp;&amp;actionMap.get('ORA_AUTO_CANCEL_DAYS') != null) {
                                comments += "Set the auto cancel date to 10 days from now."
                                autoCancelDate = ZonedDateTime.now().plusDays(actionMap.get('ORA_AUTO_CANCEL_DAYS') as Long).format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))
                            } else if (clearAutoCancelDate) {
                                comments += "Clear the auto cancel date."
                            }
                        }
                        if (queue || autoCancelDate || clearAutoCancelDate) {
                            facilityAllocation.add([facilityId: queue, comments: comments, routingRule:routingRuleName,
                                    items: unfillableItemSeqIds.collect { [orderItemSeqId: it, autoCancelDate: autoCancelDate, clearAutoCancelDate: clearAutoCancelDate] }])
                        }
                    } else {
                        //If all items allocated no need to run next rule
                        runNextRule = false
                    }
                    //}
                </script>
            <!--TODO : Find better way to generate the oms token and oms base url -->
            <entity-find-one entity-name="org.apache.ofbiz.common.property.SystemProperty" value-field="baseUrlProperty" cache="true">
                <field-map field-name="systemResourceId" value="url"/>
                <field-map field-name="systemPropertyId" value="content.url.prefix.secure"/>
            </entity-find-one>
            <script>
                token = co.hotwax.order.routing.OrderRoutingHelper.getOmsJwtToken(ec.ecfi);
            </script>
            <if condition="!token">
                <return error="true" message="Unable to generate oms token, check JWT configuration"/>
            </if>
            <set field="omsBaseUrl" from="baseUrlProperty?.systemPropertyValue"/>
            <if condition="!omsBaseUrl">
                <return error="true" message="OMS base url not found"/>
            </if>
            <if condition="facilityAllocation">
                <log message="Facility allocation for order Id [${orderId}:${shipGroupSeqId}${orderItemSeqId?':' + orderItemSeqId :''}]: ${facilityAllocation}, applied under the '${routingRule.ruleName} [${routingRule.routingRuleId}]' routing rule."/>
                <!-- TODO: Handle the 500 status code, if OMS failed to respond, don't run the next rule -->
                <service-call name="co.hotwax.order.routing.InventoryReservationServices.run#FacilityAllocation" transaction-timeout="3600"
                              in-map="[orderId: orderId, token: token, facilityAllocation: facilityAllocation]" transaction="force-new"
                              ignore-error="true" out-map="outResult"/>
                <log message="Facility allocation result: ${outResult}"/>
            <else>
                <log message="No facility allocation found for orderId [${orderId}] for routing rule ${routingRule.ruleName} [${routingRule.routingRuleId}}"/>
            </else>
            </if>
        </actions>
    </service>

    <!-- We can achieve this by OrderRoutingGroup and ServiceJob, as both the entity belongs to different database so we can;t create join between them -->
    <service verb="get" noun="OrderRoutingGroupSchedule">
        <in-parameters>
            <parameter name="routingGroupId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="schedule" type="Map">
                <auto-parameters entity-name="moqui.service.job.ServiceJob"/>
            </parameter>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="co.hotwax.order.routing.OrderRoutingGroup" value-field="orderRoutingGroup"/>
            <if condition="!orderRoutingGroup">
                <return error="true" message="OrderRoutingGroup not found for specified routingGroupId [${routingGroupId}]."/>
            </if>
            <if condition="!orderRoutingGroup.jobName">
                <return message="No schedule found for order routing group ${orderRoutingGroup.groupName} [${orderRoutingGroup.routingGroupId}]/"/>
            </if>
            <entity-find-one entity-name="moqui.service.job.ServiceJob" value-field="serviceJob">
                <field-map field-name="jobName" from="orderRoutingGroup.jobName"/>
            </entity-find-one>
            <if condition="serviceJob">
                <script>
                    schedule = serviceJob.getMap()
                    schedule.cronDescription = org.moqui.impl.service.ScheduledJobRunner.getCronDescription(schedule.cronExpression, ec.user.getLocale(), true)
                    cronExecutionTime = org.moqui.impl.service.ScheduledJobRunner.getExecutionTime(schedule.cronExpression)
                    nextExecutionTime = cronExecutionTime.nextExecution(java.time.ZonedDateTime.now()).orElse(null)
                    if (nextExecutionTime != null) {
                        schedule.nextExecutionDateTime = nextExecutionTime.toEpochSecond()
                    }
                </script>
            </if>
        </actions>
    </service>
    <service verb="store" noun="OrderRoutingGroupSchedule">
        <in-parameters>
            <parameter name="routingGroupId" required="true"/>
            <auto-parameters entity-name="moqui.service.job.ServiceJob" include="nonpk">
                <exclude field-name="description"/>
                <exclude field-name="serviceName"/>
            </auto-parameters>
        </in-parameters>
        <out-parameters>
            <parameter name="jobName"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="co.hotwax.order.routing.OrderRoutingGroup" value-field="orderRoutingGroup"/>
            <if condition="!orderRoutingGroup">
                <return error="true" message="OrderRoutingGroup not found for specified routingGroupId [${routingGroupId}]."/>
            </if>
            <if condition="!orderRoutingGroup.productStoreId">
                <return message="No productStore associated with routing group ${orderRoutingGroup.groupName} [${orderRoutingGroup.routingGroupId}]/"/>
            </if>
            <if condition="cronExpression">
                <script>
                    try {
                        cronDescription = org.moqui.impl.service.ScheduledJobRunner.getCronDescription(cronExpression, ec.user.getLocale(), false)
                    } catch (Exception e) {
                        ec.logger.error("Error getting cron description: ${e.getMessage()}")
                        ec.message.addError("Error getting cron description: ${e.getMessage()}")
                        return
                    }
                </script>
            </if>
            <if condition="orderRoutingGroup.jobName">
                <entity-find-one entity-name="moqui.service.job.ServiceJob" value-field="serviceJob">
                    <field-map field-name="jobName" from="orderRoutingGroup.jobName"/>
                </entity-find-one>
            </if>
            <set field="description" value="Service job for order routing group ${orderRoutingGroup.groupName} [${orderRoutingGroup.routingGroupId}]"/>
            <set field="serviceName" value="co.hotwax.order.routing.OrderRoutingServices.run#OrderRoutingGroup"/>
            <if condition="!serviceJob">
                <if condition="!paused">
                    <set field="paused" value="N"/>
                </if>
                <set field="jobName" value="Order_Routing_Group_${orderRoutingGroup.routingGroupId}"/>
                <service-call name="create#moqui.service.job.ServiceJob" in-map="context + [jobName: jobName]" out-map="context"/>
                <!-- Set the JobName in orderRoutingGroup entity -->
                <set field="orderRoutingGroup.jobName" from="jobName"/>
                <service-call name="update#co.hotwax.order.routing.OrderRoutingGroup" in-map="[routingGroupId:routingGroupId, jobName: jobName]"/>
                <!-- for order routing scheduling we need only two parameters
                 - productStoreId - This is to ensure only one routing is in execution for an ProductStore
                 - routingGroupId
                 -->
                <service-call name="create#moqui.service.job.ServiceJobParameter" in-map="[jobName: jobName, parameterName: 'routingGroupId', parameterValue: routingGroupId]"/>
                <service-call name="create#moqui.service.job.ServiceJobParameter" in-map="[jobName: jobName, parameterName: 'productStoreId', parameterValue: orderRoutingGroup.productStoreId]"/>
                <return message="Order routing group schedule has been created successfully."/>
            <else>
                <service-call name="update#moqui.service.job.ServiceJob" in-map="context + [jobName: serviceJob.jobName]" out-map="context"/>
                <return message="Order routing group schedule has been updated successfully."/>
            </else>
            </if>
        </actions>
    </service>
</services>
