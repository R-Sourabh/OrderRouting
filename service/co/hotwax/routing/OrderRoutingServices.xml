<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">

    <service verb="clean" noun="OrderRoutingRun" authenticate="false" transaction-timeout="600">
        <description>Deletes OrderRoutingRun records older than a specified number of days.</description>
        <in-parameters><parameter name="daysToKeep" type="Integer" default="60"/></in-parameters>
        <out-parameters><parameter name="recordsRemoved" type="Long"/></out-parameters>
        <actions>
            <script>
                import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityCondition
                ExecutionContext ec = context.ec
                Calendar basisCal = ec.user.getCalendarSafe()
                basisCal.add(Calendar.DAY_OF_YEAR, (int) - daysToKeep)
                basisTimestamp = new Timestamp(basisCal.getTimeInMillis())
                recordsRemoved = ec.entity.find("moqui.service.job.ServiceJobRun")
                .condition("startTime", EntityCondition.LESS_THAN, basisTimestamp)
                .disableAuthz().deleteAll()
            </script>
            <log message="Removed ${recordsRemoved} OrderRoutingRun records."/>
        </actions>
    </service>

    <service verb="run" noun="OrderRoutingGroup" transaction-timeout="36000"
             semaphore="wait" semaphore-parameter="productStoreId" semaphore-timeout="3600" semaphore-sleep="120" semaphore-name="OrderRoutingGroup">
        <in-parameters>
            <parameter name="routingGroupId" required="true"/>
            <parameter name="productStoreId" required="true"/>
            <parameter name="orderId"/>
            <parameter name="shipGroupSeqId"/>
            <parameter name="forceRun" type="Boolean" default-value="false"/>
            <!--
            In order to leverage the Service semaphore capabilities provided by the framework, we have chosen to include productStoreId as an input parameter.
            While productStoreId already exists in the OrderRoutingGroup entity,
            opting to use it as an input parameter allows us to seamlessly utilize the framework's existing functionality.

            By incorporating productStoreId as an input parameter,
            we can take advantage of the framework's built-in features without the need for additional custom handling.
            This approach aligns with the established design principles within the framework and ensures a more streamlined and maintainable solution.
            -->
        </in-parameters>
        <actions>
            <entity-find-one entity-name="co.hotwax.order.routing.OrderRoutingGroup" value-field="orderRoutingGroup"/>
            <if condition="!orderRoutingGroup">
                <return error="true" message="Order routing not found for ${routingGroupId}"/>
            </if>
            <if condition="!orderRoutingGroup.productStoreId">
                <return error="true" message="No productStore associated with routingGroup ${routingGroupId}"/>
            </if>
            <if condition="orderRoutingGroup.productStoreId != productStoreId">
                <return error="true" message="Order routing group [${routingGroupId}] is not associated with productStoreId [${productStoreId}]."/>
            </if>
            <!--TODO: Need to check if we really want to add below check, as we are using service semaphore to avoid simultaneous run -->
            <entity-find entity-name="co.hotwax.order.routing.OrderRoutingRun" list="routingRuns">
                <econditions>
                    <econdition field-name="productStoreId" from="orderRoutingGroup.productStoreId"/>
                    <econdition field-name="endDate" from="null"/>
                </econditions>
                <order-by field-name="-startDate"/>
            </entity-find>
            <set field="routingRun" from="routingRuns?routingRuns[0]: null"/>
            <if condition="routingRun">
                <if condition="forceRun">
                    <service-call name="update#co.hotwax.order.routing.OrderRoutingRun" transaction="force-new" ignore-error="true"
                                  in-map="[routingRunId:routingRun.routingRunId,hasError:'Y', routingResult:'Force run initiated', endDate:ec.user.nowTimestamp]"
                                  out-map="routingRunResult"/>
                    <else>
                        <return error="true"
                                message="Routing run [${routingRun.routingRunId}] for productStoreId [${orderRoutingGroup.productStoreId}]
                        already in execution since ${routingRun.startDate}"/>
                    </else>
                </if>

            </if>
            <entity-find entity-name="co.hotwax.order.routing.OrderRouting" list="orderRoutings">
                <econditions>
                    <econdition field-name="routingGroupId" from="routingGroupId"/>
                    <econdition field-name="statusId" value="ROUTING_ACTIVE"/>
                </econditions>
                <order-by field-name="sequenceNum asc"/>
            </entity-find>
            <if condition="!orderRoutings">
                <return type="warning" message="No order routing configuration found for the specified routing group [${routingGroupId}]."/>
            </if>
            <iterate list="orderRoutings" entry="orderRouting">
                <service-call name="create#co.hotwax.order.routing.OrderRoutingRun" transaction="force-new" ignore-error="true"
                        in-map="[routingGroupId:routingGroupId, orderRoutingId: orderRouting.orderRoutingId,
                                productStoreId: productStoreId, startDate:ec.user.nowTimestamp]"
                        out-map="routingRunResult"/>
                <script>
                    /*
                        Calling a service in a script with ignore-error="true".
                        In this scenario, there is no direct way to identify if the service returned an error.
                        As we want to log the hasError status at the OrderRoutingRun level, to address this we are calling service in script tag
                    */
                    try {
                        def routingResult = ec.service.sync().name("co.hotwax.routing.OrderRoutingServices.run#OrderRouting")
                                .requireNewTransaction(true)
                                .parameters([orderRoutingId: orderRouting.orderRoutingId, orderId: orderId, shipGroupSeqId: shipGroupSeqId])
                                .call()
                        if (!routingResult.runNextRouting &amp;&amp; orderId) {
                            break;
                        }
                    } catch (Throwable e) {
                        ec.logger.error("There is an issue with run#OrderRouting", e)
                    }
                    def routingResult = ec.message.getMessagesString()
                    def hasError = "N"
                    if (ec.message.hasError()) {
                        hasError = "Y"
                        routingResult = ec.message.getErrorsString()
                    }
                    ec.message.clearAll();
                </script>
                <service-call name="update#co.hotwax.order.routing.OrderRoutingRun" transaction="force-new" ignore-error="true"
                        in-map="[routingRunId:routingRunResult.routingRunId,hasError:hasError, routingResult:routingResult, endDate:ec.user.nowTimestamp]"
                        out-map="routingRunResult"/>
            </iterate>
            <message type="success">Finished order routing for ${orderRoutingGroup.groupName} [${routingGroupId}] routing group.</message>
        </actions>
    </service>

    <service verb="run" noun="OrderRouting" transaction-timeout="36000">
        <in-parameters>
            <parameter name="orderRoutingId" required="true"/>
            <parameter name="orderId"/>
            <parameter name="shipGroupSeqId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="runNextRouting" type="Boolean"/>
        </out-parameters>
        <actions>
            <set field="runNextRouting" value="true" type="Boolean"/>
            <entity-find-one entity-name="co.hotwax.order.routing.OrderRouting" value-field="orderRouting" cache="true"/>
            <log message="Running orderRouting ${orderRouting.routingName} [${orderRoutingId}] for orderId ${orderId} and shipGroupSeqId ${shipGroupSeqId}"/>
            <if condition="!orderRouting">
                <return error="true" message="No order routing found for id ${orderRoutingId}"/>
            </if>
            <if condition="!'ROUTING_ACTIVE'.equals(orderRouting.statusId)">
                <return error="true" message="Order routing ${orderRouting.routingName} [${orderRoutingId}] is not active"/>
            </if>
            <entity-find entity-name="co.hotwax.order.routing.OrderFilterCondition" list="orderFilterConditions">
                <econdition field-name="orderRoutingId" from="orderRoutingId"/>
                <order-by field-name="sequenceNum asc"/>
            </entity-find>
            <filter-map-list list="orderFilterConditions" to-list="filterConditions">
                <field-map field-name="conditionTypeEnumId" value="ENTCT_FILTER"/>
            </filter-map-list>
            <filter-map-list list="orderFilterConditions" to-list="sortFields">
                <field-map field-name="conditionTypeEnumId" value="ENTCT_SORT_BY"/>
            </filter-map-list>
            <entity-find entity-name="co.hotwax.order.routing.OrderRoutingRule" list="orderRoutingRules">
                <econditions>
                    <econdition field-name="orderRoutingId" from="orderRoutingId"/>
                    <econdition field-name="statusId" value="RULE_ACTIVE"/>
                </econditions>
                <order-by field-name="sequenceNum asc"/>
            </entity-find>

            <if condition="!orderRoutingRules">
                <return error="true" message="No routing rule setup for ${orderRoutingId}"/>
            </if>
            <script>
                import org.moqui.entity.EntityListIterator
                import org.moqui.entity.EntityFind;
                import org.moqui.impl.entity.EntityConditionFactoryImpl

                EntityFind orderFind = ec.entity.find("co.hotwax.order.OrderItemsQueue")
                orderFind.condition("itemStatusId", "ITEM_APPROVED")
                orderFind.condition("orderItemCount", org.moqui.entity.EntityCondition.GREATER_THAN, "0")
                if (orderId) {
                    orderFind.condition("orderId", orderId)
                    orderFind.condition("shipGroupSeqId", shipGroupSeqId)
                } else {
                    for (filterCondition: filterConditions) {
                        orderFind.condition(filterCondition.fieldName, EntityConditionFactoryImpl.stringComparisonOperatorMap.get(filterCondition.operator), filterCondition.fieldValue)
                    }
                    for (sortField: sortFields) {
                        orderFind.orderBy(sortField.fieldName)
                    }
                }
                try (EntityListIterator eli = orderFind.iterator()) {
                    while ((shipGroup = eli.next()) != null) {
                        try {
                            ruleIterator = orderRoutingRules.iterator()
                            while (ruleIterator.hasNext()) {
                                routingRule = ruleIterator.next()
                                ruleResult = ec.service.sync().name("co.hotwax.routing.OrderRoutingServices.run#OrderRoutingRule")
                                        .requireNewTransaction(true)
                                        .parameters([orderRoutingId: orderRouting.orderRoutingId, routingRuleId: routingRule.routingRuleId,
                                                orderId: shipGroup.orderId, shipGroupSeqId: shipGroup.shipGroupSeqId])
                                    .call()
                                if (!ec.message.hasError()) {
                                    actionResult = ec.service.sync().name("co.hotwax.routing.OrderRoutingServices.eval#OrderRoutingActions")
                                            .requireNewTransaction(true)
                                            .parameters([orderId: shipGroup.orderId, shipGroupSeqId: shipGroup.shipGroupSeqId,
                                                    routingRuleId: routingRule.routingRuleId, suggestedFulfillmentLocations: ruleResult.suggestedFulfillmentLocations])
                                            .call()
                                    if (ec.message.hasError()) {
                                        ec.logger.warn("Ignoring order routing actions errors" + ec.message.getErrorsString())
                                    }
                                    if (!actionResult.runNextRule) {
                                        //Break the outer loop as well if its only for single orderId
                                        if (orderId) { runNextRouting = false }
                                        break
                                    }
                                } else {
                                    ec.logger.warn("Ignoring order routing rule errors" + ec.message.getErrorsString())
                                    ec.message.clearErrors()
                                }
                            }
                        } catch (Throwable e) {
                            ec.logger.error("There is an issue with run#OrderRoutingRule", e)
                        }
                    }
                } catch (Exception e) {
                    ec.logger.error(e.getMessage())
                }
            </script>
        </actions>
    </service>

    <service verb="run" noun="OrderRoutingRule" transaction-timeout="36000">
        <in-parameters>
            <parameter name="orderRoutingId"/>
            <parameter name="routingRuleId"/>
            <parameter name="orderId"/>
            <parameter name="shipGroupSeqId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="suggestedFulfillmentLocations"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="co.hotwax.order.routing.OrderRoutingRule" value-field="orderRoutingRule" cache="true"/>
            <if condition="!orderRoutingRule">
                <return error="true" message="No order routing found for id ${routingRuleId}"/>
            </if>
            <if condition="!'RULE_ACTIVE'.equals(orderRoutingRule.statusId)">
                <return error="true" message="Order routing ${orderRoutingRule.ruleName} [${orderRoutingId}] is not active"/>
            </if>
            <log message="Running orderRoutingRule ${orderRoutingRule.ruleName} [${routingRuleId}] for orderId ${orderId} and shipGroupSeqId ${shipGroupSeqId}"/>

            <entity-find entity-name="co.hotwax.order.routing.OrderRoutingRuleInvCond" list="inventoryConditions">
                <econdition field-name="routingRuleId" from="routingRuleId"/>
            </entity-find>
            <set field="inventoryFilterMap" from="[:]" />
            <filter-map-list list="inventoryConditions" to-list="filterConditions">
                <field-map field-name="conditionTypeEnumId" value="ENTCT_FILTER"/>
            </filter-map-list>
            <iterate list="filterConditions" entry="filterCondition">
                <script>
                    inventoryFilterMap.put(filterCondition.fieldName, filterCondition)
                </script>
            </iterate>
            <filter-map-list list="inventoryConditions" to-list="sortFields">
                <field-map field-name="conditionTypeEnumId" value="ENTCT_SORT_BY"/>
            </filter-map-list>
            <order-map-list list="sortFields">
                <order-by field-name="sequenceNum asc"/>
            </order-map-list>
            <set field="inventorySortByList" from="sortFields != null ? sortFields.fieldName:[]" type="List"/>
            <set field="templateLoc" value="component://order-routing/sql/InventorySourceSelector.sql.ftl"/>
            <set field="suggestedFulfillmentLocations" from="[]"/>

            <script>
                Writer writer = new StringWriter()
                ec.resourceFacade.template(templateLoc, writer)
                //ec.logger.info("======writer==${writer}==")
                java.sql.Connection con = ec.getEntity().getConnection(orderRoutingRule.getEntityDefinition().getEntityGroupName())
                con.createStatement().withCloseable({ statement ->
                    statement.executeQuery(writer.toString()).withCloseable({resultSet ->
                        while (resultSet.next()) {
                            suggestedFulfillmentLocations.add([
                                orderId: resultSet.getString('ORDER_ID'),
                                orderItemSeqId: resultSet.getString('ORDER_ITEM_SEQ_ID'),
                                //productId: resultSet.getString('PRODUCT_ID'),
                                shipGroupTotalQty: resultSet.getInt('ship_group_total_qty'),
                                itemQty: resultSet.getInt('ITEM_QTY'),
                                routedItemQty: resultSet.getInt('ROUTED_ITEM_QTY'),
                                facilityTypeId: resultSet.getString('FACILITY_TYPE_ID'),
                                facilityId: resultSet.getString('FACILITY_ID'),
                                //originPostalCode: resultSet.getString('ORIGIN_POSTAL_CODE'),
                                //destinationPostalCode: resultSet.getString('DESTINATION_POSTAL_CODE'),
                                customerPrefShipMethod: resultSet.getString('CUSTOMER_PREF_SHIP_METHOD'),
                                //suggestedShipMethod: resultSet.getString('SUGGESTED_SHIP_METHOD'),
                                //groundTransitTime: resultSet.getInt('GROUND_TRANSIT_TIME'),
                                shippingZone: resultSet.getString('SHIPPING_ZONE'),
                                //rankByOrderAtFacility: resultSet.getString('RANK_BY_ORDER_AT_FACILITY'),
                                //rankByItemCnt: resultSet.getString('RANK_BY_ITEM_CNT'),
                                //carrierPostalCodeId: resultSet.getString('CARRIER_POSTAL_CODE_ID'),
                                //facilityExhausted: resultSet.getString('FACILITY_EXHAUSTED'),
                                //lastInventoryCount: resultSet.getString('LAST_INVENTORY_COUNT'),
                                //inv: resultSet.getString('INV'),
                                //maximumOrderLimit: resultSet.getString('MAXIMUM_ORDER_LIMIT'),
                                //lastOrderCount: resultSet.getString('LAST_ORDER_COUNT'),
                                //meetSLA: resultSet.getString('MEET_SLA')
                            ])
                        }
                    })
                })
            </script>
        </actions>
    </service>

    <service verb="eval" noun="OrderRoutingActions" transaction-timeout="3600">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="shipGroupSeqId" required="true"/>
            <parameter name="routingRuleId" required="true"/>
            <parameter name="suggestedFulfillmentLocations" type="List"/>
        </in-parameters>
        <out-parameters>
            <parameter name="runNextRule" type="Boolean"/>
            <parameter name="facilityAllocation" type="List"/>
        </out-parameters>
        <actions>
            <set field="runNextRule" value="true" type="Boolean"/>
            <entity-find-one entity-name="co.hotwax.order.routing.OrderRoutingRule" value-field="routingRule" cache="true"/>
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" value-field="orderItemShipGroup"/>
                <script>
                    import java.time.format.DateTimeFormatter;
                    import java.time.ZonedDateTime
                    import java.util.stream.Collectors;
                    import org.moqui.entity.EntityCondition
                    //TODO: Check for single vs multi, as discussed with Swapnil, this can be done in sql itself
                    //if single assignment preferred, then sql will return result only if all the shipgroup items available at single location

                    //TODO: selectField not working as expected, need to veirfy syntax
                    def orderItems = ec.entity.find("org.apache.ofbiz.order.order.OrderItem")
                            .condition([orderId: orderId,statusId: 'ITEM_APPROVED', shipGroupSeqId: shipGroupSeqId]).list();

                    def ruleActions = ec.entity.find("co.hotwax.order.routing.OrderRoutingRuleAction").useCache(true)
                            .condition("routingRuleId", routingRuleId)
                            .condition("actionValue", EntityCondition.IS_NOT_NULL, null).list();

                    /*def ruleActions = routingRule.findRelated("co.hotwax.order.routing.OrderRoutingRuleAction", null, null, true, false)
                            .filterByCondition(ec.entity.getConditionFactory().makeCondition('actionValue', EntityCondition.IS_NOT_NULL, null))*/
                    /*actionMap = [:]
                    ruleActions.each {ruleAction ->
                            actionMap.put(ruleAction.actionTypeEnumId, ruleAction.actionValue)
                    }*/

                    def actionMap = ruleActions.collectEntries { [it.actionTypeEnumId, it.actionValue] }

                    facilityAllocation = [];
                    if (!'ORA_MULTIPLE'.equals(routingRule.assignmentEnumId)) {
                        def facilityIdList = suggestedFulfillmentLocations.facilityId as Set
                        if (!(facilityIdList.size() == 1)) {
                            ec.logger.info("Inventory not found at single location for orderId ${orderId} and shipGroupSeqId ${shipGroupSeqId}");
                            return
                        }
                    }
                    //prepare map for brokered items
                    def queue = null, autoCancelDate = null, brokeredItemsSeqIds = [] ;
                    if (suggestedFulfillmentLocations) {
                        brokeredItemsSeqIds = suggestedFulfillmentLocations.orderItemSeqId;
                        def facilityIds = suggestedFulfillmentLocations.facilityId as Set;
                        facilityIds.each { facilityId->
                            def facilityItems = suggestedFulfillmentLocations.collect()
                            filterMapList(facilityItems, ["facilityId":facilityId], false)
                            /*def items = [];
                            facilityItems.each { facilityItem->
                                items.add([orderItemSeqId: facilityItem.orderItemSeqId]);
                            }*/
                            def items = facilityItems.collect { [orderItemSeqId: it.orderItemSeqId] }
                            facilityAllocation.add([facilityId:facilityId, items: items])
                        }
                    }
                    def unfillableItemSeqIds = orderItems.orderItemSeqId.stream().filter(i -> !brokeredItemsSeqIds.contains(i)).collect(Collectors.toList())
                    if (unfillableItemSeqIds) {
                        if (actionMap.get('ORA_MV_TO_QUEUE') != null) {
                            queue = actionMap.get('ORA_MV_TO_QUEUE');
                            runNextRule = false
                        }
                        if (actionMap.get('ORA_AUTO_CANCEL_DATE') != null) {
                            if (!queue) {
                                queue = orderItemShipGroup.facilityId;
                            }
                            /*now = ZonedDateTime.now().plusDays(Long.valueOf(actionMap.get('ORA_AUTO_CANCEL_DATE')))
                            autoCancelDate = now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))*/
                            autoCancelDate = ZonedDateTime.now().plusDays(actionMap.get('ORA_AUTO_CANCEL_DATE') as Long).format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))
                        }
                        if (queue || autoCancelDate) {
                            facilityAllocation.add([facilityId: queue, items: unfillableItemSeqIds.collect { [orderItemSeqId: it, autoCancelDate: autoCancelDate] }])
                        }
                    } else {
                        runNextRule = false
                    }
                    //}
                </script>
            <!--TODO : Find way to generate the oms token and oms base url -->
            <set field="token" value=""/>
            <set field="omsBaseUrl" value=""/>
            <log message="==facilityAllocation===${facilityAllocation}="/>
            <if condition="facilityAllocation">
                <!--<service-call name="co.hotwax.routing.InventoryReservationServices.run#FacilityAllocation" transaction-timeout="3600"
                              in-map="[orderId: orderId, token: token, facilityAllocation: facilityAllocation]" transaction="force-new"
                              ignore-error="true" out-map="outResult"/>-->

            </if>
        </actions>
    </service>
</services>
